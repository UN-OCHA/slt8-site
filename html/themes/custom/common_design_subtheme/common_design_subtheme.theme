<?php

/**
 * @file
 * Theme preprocessors.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Access\AccessResultInterface;

/**
 * Get the list of components to attach to formatted text fields.
 *
 * @return array
 *   Array with component libraries as keys and list of tags and classes to
 *   add as values.
 */
function common_design_subtheme_get_components() {
  static $components = [
    'common_design/cd-table' => [
      'table' => ['cd-table', 'cd-table--striped', 'cd-table--responsive'],
    ],
  ];
  return $components;
}

/**
 * Implements hook_preprocess_field().
 *
 * This adds attach component libraries and add necessary classes to filtered
 * text field.
 *
 * Note: other possibilities:
 * - Target specific fields: `$variables['element']['#field_name']`.
 * - Target view mode: `$variables['element']['#view_mode']`.
 *
 * Note: we could also add the #post_render and libraries to all the
 * "processed_text" elements via a hook_element_info_alter().
 *
 * @todo Do we need to alter the cache somehow?
 *
 * @see template_preprocess_field()
 */
function common_design_subtheme_preprocess_field(&$variables) {
  switch ($variables['element']['#formatter']) {
    case 'text_summary_or_trimmed':
    case 'text_trimmed':
    case 'text_default':
      foreach ($variables['items'] as $key => $item) {
        $variables['items'][$key]['content']['#post_render'][] = 'common_design_subtheme_add_component_classes';
      }
      foreach (common_design_subtheme_get_components() as $component => $dummy) {
        $variables['#attached']['library'][] = $component;
      }
      break;
  }
}

/**
 * Add component classes to tags.
 *
 * @param string $html
 *   Html output.
 * @param array $element
 *   Render array.
 *
 * @return string
 *   Modified HTML.
 */
function common_design_subtheme_add_component_classes($html, array $element) {
  $components = common_design_subtheme_get_components();
  if (empty($components)) {
    return $html;
  }

  $dom = Html::load($html);

  // Add the classes to the tags for each component.
  foreach ($components as $tags) {
    foreach ($tags as $tag => $classes) {
      $nodes = $dom->getElementsByTagName($tag);
      foreach ($nodes as $node) {
        $existing = $node->getAttribute('class') ?? '';
        $classes = array_merge(preg_split("/\s+/", $existing), $classes);
        $node->setAttribute('class', trim(implode(' ', array_unique($classes))));
      }
    }
  }

  $html = Html::serialize($dom);
  return trim($html);
}

/**
 * Implements hook_preprocess_paragraph__page_title().
 *
 * We want to display the local tasks links between the hero image and the
 * page title which are paragraphs of the node. To do so, we render the
 * local tasks block and pass it to the paragraphs--page-title template.
 * This assumes that the visibility of the local tasks (Tabs) has been disabled
 * for the node type on the local tasks block configuration page.
 *
 * @see /admin/structure/block/manage/common_design_subtheme_local_tasks
 */
function common_design_subtheme_preprocess_paragraph__page_title(&$variables) {
  $variables['local_tasks'] = common_design_subtheme_get_local_tasks_render_array();
}

/**
 * Implements hook_preprocess_page().
 *
 * Ensure we display the local tasks (edit etc.) on node pages.
 */
function common_design_subtheme_preprocess_page(&$variables) {
  if (isset($variables['node']) && !isset($variables['page']['content']['common_design_subtheme_local_tasks'])) {
    $block = common_design_subtheme_get_local_tasks_render_array();
    $variables['page']['content']['common_design_subtheme_local_tasks'] = $block;
  }
}

/**
 * Render the local tasks block.
 *
 * @see https://drupal.stackexchange.com/a/171733
 *
 * @return array
 *   Renderable array of the local tasks block. Empty array if this was already
 *   called before to avoid displaying the block several times.
 */
function common_design_subtheme_get_local_tasks_render_array() {
  static $rendered = FALSE;

  if (!$rendered) {
    // Prevent rendering the block several times.
    $rendered = TRUE;

    // Generate an instance of the local tasks plugin block.
    $block_manager = \Drupal::service('plugin.manager.block');
    $plugin_block = $block_manager->createInstance('local_tasks_block', []);

    // Check if the block is accessible to the current user.
    $access = $plugin_block->access(\Drupal::currentUser());
    // This can be a boolean or an object implementing AccessResultInterface.
    if ($access === TRUE || ($access instanceof AccessResultInterface && $access->isAllowed())) {
      return $plugin_block->build();
    }
  }

  return [];
}
