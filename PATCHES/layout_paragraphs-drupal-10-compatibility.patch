diff --git a/js/builder.es6.js b/js/builder.es6.js
index 4d003ef..0666cfa 100644
--- a/js/builder.es6.js
+++ b/js/builder.es6.js
@@ -22,36 +22,6 @@
     Drupal.attachBehaviors($container[0], drupalSettings);
   }
 
-  /**
-   * Repositions open dialogs when their height changes to exceed viewport.
-   *
-   * The height of an open dialog will change based on its contents and can
-   * cause a dialog to grow taller than the current window viewport, making
-   * it impossible to reach parts of the content (for example, submit buttons).
-   * Repositioning the dialog fixes the issue.
-   * @see https://www.drupal.org/project/layout_paragraphs/issues/3252978
-   * @see https://stackoverflow.com/questions/5456298/refresh-jquery-ui-dialog-position
-   *
-   * @param {Number} intervalId
-   *   The interval id.
-   */
-  function repositionDialog(intervalId) {
-    const $dialogs = $('.lpb-dialog');
-    if ($dialogs.length === 0) {
-      clearInterval(intervalId);
-      return;
-    }
-    $dialogs.each((i, dialog) => {
-      const bounding = dialog.getBoundingClientRect();
-      const viewPortHeight = window.innerHeight || document.documentElement.clientHeight;
-      if (bounding.bottom > viewPortHeight) {
-        const $dialog =  $('.ui-dialog-content', dialog);
-        const pos = $dialog.dialog('option', 'position');
-        $dialog.dialog('option', 'position', pos);
-      }
-    });
-  }
-
   /**
    * Makes an ajax request to reorder all items in the layout.
    * This function is debounced below and not called directly.
@@ -525,14 +495,4 @@
       }
     }
   });
-  // Repositions open dialogs.
-  // @see https://www.drupal.org/project/layout_paragraphs/issues/3252978
-  // @see https://stackoverflow.com/questions/5456298/refresh-jquery-ui-dialog-position
-  let lpDialogInterval;
-  $(window).on('dialog:aftercreate', (event, dialog, $dialog) => {
-    if ($dialog[0].id.indexOf('lpb-dialog-') === 0) {
-      clearInterval(lpDialogInterval);
-      lpDialogInterval = setInterval(repositionDialog.bind(null, lpDialogInterval), 500);
-    }
-  });
 })(jQuery, Drupal, Drupal.debounce, dragula, once);
diff --git a/js/builder.js b/js/builder.js
index 8f86413..de17546 100644
--- a/js/builder.js
+++ b/js/builder.js
@@ -27,22 +27,6 @@ function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
     });
     Drupal.attachBehaviors($container[0], drupalSettings);
   }
-  function repositionDialog(intervalId) {
-    var $dialogs = $('.lpb-dialog');
-    if ($dialogs.length === 0) {
-      clearInterval(intervalId);
-      return;
-    }
-    $dialogs.each(function (i, dialog) {
-      var bounding = dialog.getBoundingClientRect();
-      var viewPortHeight = window.innerHeight || document.documentElement.clientHeight;
-      if (bounding.bottom > viewPortHeight) {
-        var $dialog = $('.ui-dialog-content', dialog);
-        var pos = $dialog.dialog('option', 'position');
-        $dialog.dialog('option', 'position', pos);
-      }
-    });
-  }
   function doReorderComponents($element) {
     var id = $element.attr(idAttr);
     var order = $('.js-lpb-component', $element).get().map(function (item) {
@@ -356,11 +340,4 @@ function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
       }
     }
   });
-  var lpDialogInterval;
-  $(window).on('dialog:aftercreate', function (event, dialog, $dialog) {
-    if ($dialog[0].id.indexOf('lpb-dialog-') === 0) {
-      clearInterval(lpDialogInterval);
-      lpDialogInterval = setInterval(repositionDialog.bind(null, lpDialogInterval), 500);
-    }
-  });
-})(jQuery, Drupal, Drupal.debounce, dragula, once);
\ No newline at end of file
+})(jQuery, Drupal, Drupal.debounce, dragula, once);
diff --git a/layout_paragraphs.install b/layout_paragraphs.install
index 7b63460..60fee76 100644
--- a/layout_paragraphs.install
+++ b/layout_paragraphs.install
@@ -32,6 +32,7 @@ function layout_paragraphs_update_9001(&$sandbox) {
     ->condition('behavior_settings', '_disabled', 'CONTAINS')
     ->condition('behavior_settings', 'layout_paragraphs', 'CONTAINS')
     ->range(0, 20)
+    ->accessCheck(FALSE)
     ->execute();
 
   foreach ($ids as $id) {
@@ -53,6 +54,6 @@ function layout_paragraphs_update_9001(&$sandbox) {
     $sandbox['progress']++;
     $sandbox['current_pk'] = $id;
   }
-  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];
+  $sandbox['#finished'] = empty($sandbox['max']) || count($ids) == 0 ? 1 : $sandbox['progress'] / $sandbox['max'];
 
 }
